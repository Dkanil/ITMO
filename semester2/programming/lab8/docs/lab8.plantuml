@startuml
left to right direction

package lab-client {
    class Asker {
      + askBand(Console): MusicBand
      - askCoordinates(Console): Coordinates
      - askStudio(Console): Studio
    }
    class AuthenticationManager {
      + sendAuthenticationRequest(NetworkManager, Console, Pair<String, String>, String): Pair<String, String>
      + authenticateUser(NetworkManager, Console): Pair<String, String>
    }
    class Client {
      - attempts: int
      - console: Console
      - networkManager: NetworkManager
      - scriptStackCounter: int
      - SERVER_PORT: int
      - commandsData: Map<String, Pair<ArgumentValidator, Boolean>>
      + user: Pair<String, String>
      - SERVER_HOST: String
      - runScript(String): ExecutionStatus
      + main(String[]): void
      - askingRequest(Console, String): Request
      - prepareRequest(Console, String): Request
      - validateCommand(String[]): ExecutionStatus
    }
    interface Console << interface >> {
      + printError(Object): void
      + print(Object): void
      + println(Object): void
      + readln(): String
    }
    class ElementValidator {
      + validating(MusicBand): Pair<ExecutionStatus, MusicBand>
      + validateAsking(Console): Pair<ExecutionStatus, MusicBand>
    }
    class FileConsole {
      - input: BufferedReader
      + println(Object): void
      + readln(): String
      + printError(Object): void
      + print(Object): void
    }
    class NetworkManager {
      - SERVER_HOST: String
      - PORT: int
      - channel: SocketChannel
      + connect(): void
      + send(Request): void
      + receive(): Response
      + close(): void
    }
    class StandartConsole {
      + readln(): String
      + print(Object): void
      + printError(Object): void
      + println(Object): void
    }
}

package lab-common {
    class ArgumentValidator {
      + validate(String, String): ExecutionStatus
    }
    class Coordinates {
      - y: Integer
      - serialVersionUID: long
      - x: double
      + equals(Object): boolean
      + getY(): Integer
      + getX(): double
      + hashCode(): int
      + toString(): String
      + validate(): boolean
    }
    class Element {
      + getId(): Long
    }
    class EmptyValidator {
      - serialVersionUID: long
      + validate(String, String): ExecutionStatus
    }
    class ExecutionStatus {
      - message: String
      - collection: Stack<MusicBand>
      - serialVersionUID: long
      - status: boolean
      + getMessage(): String
      + getCollection(): Stack<MusicBand>
      + isSuccess(): boolean
    }
    class GenreValidator {
      - serialVersionUID: long
      + validate(String, String): ExecutionStatus
    }
    class IdValidator {
      - serialVersionUID: long
      + validate(String, String): ExecutionStatus
    }
    class MusicBand {
      - name: String
      - user: String
      - numberOfParticipants: Long
      - coordinates: Coordinates
      - albumsCount: Long
      - genre: MusicGenre
      - studio: Studio
      - description: String
      - id: Long
      - serialVersionUID: long
      - creationDate: LocalDateTime
      + getCoordinates(): Coordinates
      + getGenre(): MusicGenre
      + getNumberOfParticipants(): Long
      + updateGenre(MusicGenre): void
      + validate(): boolean
      + updateId(Long): void
      + toString(): String
      + updateStudio(Studio): void
      + updateCoordinates(Coordinates): void
      + getDescription(): String
      + getId(): Long
      + getCreationDate(): LocalDateTime
      + updateNumberOfParticipants(Long): void
      + equals(Object): boolean
      + getName(): String
      + getStudio(): Studio
      + updateName(String): void
      + getUser(): String
      + hashCode(): int
      + compareTo(Element): int
      + updateAlbumsCount(Long): void
      + updateDescription(String): void
      + getAlbumsCount(): Long
    }
    class MusicBandBuilder {
      - albumsCount: Long
      - coordinates: Coordinates
      - user: String
      - id: Long
      - name: String
      - studio: Studio
      - creationDate: LocalDateTime
      - genre: MusicGenre
      - numberOfParticipants: Long
      - description: String
      + setNumberOfParticipants(Long): MusicBandBuilder
      + setDescription(String): MusicBandBuilder
      + setGenre(MusicGenre): MusicBandBuilder
      + setId(Long): MusicBandBuilder
      + setName(String): MusicBandBuilder
      + setAlbumsCount(Long): MusicBandBuilder
      + setCoordinates(Coordinates): MusicBandBuilder
      + setCreationDate(LocalDateTime): MusicBandBuilder
      + build(): MusicBand
      + setUser(String): MusicBandBuilder
      + setStudio(Studio): MusicBandBuilder
    }
    enum MusicGenre << enumeration >> {
      + BRIT_POP: 
      + JAZZ: 
      + MATH_ROCK: 
      + values(): MusicGenre[]
      + list(): String
      + valueOf(String): MusicGenre
    }
    class Pair<A, B> {
      - a: A
      - b: B
      - serialVersionUID: long
      + setSecond(B): void
      + getSecond(): B
      + setFirst(A): void
      + getFirst(): A
      + toString(): String
    }
    enum PermissionType << enumeration >> {
      - permissionLevel: int
      + MODERATOR: 
      + USER: 
      + ADMIN: 
      + ABOBA: 
      + getAllPermissions(): String
      + valueOf(String): PermissionType
      + values(): PermissionType[]
      + getPermissionLevel(): int
    }
    class Request {
      - band: MusicBand
      - serialVersionUID: long
      - string: String
      - user: Pair<String, String>
      + getUser(): Pair<String, String>
      + getCommand(): String[]
      + getBand(): MusicBand
      + toString(): String
    }
    class Response {
      - commandsData: Map<String, Pair<ArgumentValidator, Boolean>>
      - executionStatus: ExecutionStatus
      - serialVersionUID: long
      + getExecutionStatus(): ExecutionStatus
      + toString(): String
      + getCommandsMap(): Map<String, Pair<ArgumentValidator, Boolean>>
    }
    class Studio {
      - serialVersionUID: long
      - address: String
      - name: String
      + getAddress(): String
      + equals(Object): boolean
      + hashCode(): int
      + validate(): boolean
      + getName(): String
      + toString(): String
    }
    class UserPermissionValidator {
      - serialVersionUID: long
      + validate(String, String): ExecutionStatus
    }
    interface Validatable << interface >> {
      + validate(): boolean
    }
}

package lab-server {
    class Add {
      # runInternal(MusicBand, Pair<String, String>): ExecutionStatus
    }
    class AddIfMin {
      # runInternal(MusicBand, Pair<String, String>): ExecutionStatus
    }
    class AskingCommand<T> {
      + run(String, MusicBand, Pair<String, String>): ExecutionStatus
      # runInternal(String, Pair<String, String>): ExecutionStatus
      # runInternal(MusicBand, Pair<String, String>): ExecutionStatus
      + run(String, Pair<String, String>): ExecutionStatus
    }
    class AuthenticatedExecutor {
      - executor: Executor
      + runCommand(String[], MusicBand, Pair<String, String>): ExecutionStatus
    }
    class Clear {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    interface CollectionManager << interface >> {
      + getInitializationDate(): LocalDateTime
      + clear(Pair<String, String>): ExecutionStatus
      + getById(Long): MusicBand
      + getLastSaveDate(): LocalDateTime
      + getBands(): Stack<MusicBand>
      + removeById(Long, Pair<String, String>): ExecutionStatus
      + removeAllByGenre(MusicGenre, Pair<String, String>): ExecutionStatus
      + removeFirst(Pair<String, String>): ExecutionStatus
      + add(MusicBand, Pair<String, String>): ExecutionStatus
      + update(MusicBand, Pair<String, String>): ExecutionStatus
      + sort(): void
      + getCollection(): Stack<MusicBand>
      + loadCollection(): ExecutionStatus
    }
    class CollectionManagerMain {
      - lock: ReadWriteLock
      - bandsMap: Map<Long, MusicBand>
      - collection: Stack<MusicBand>
      - instance: CollectionManagerMain
      - initializationDate: LocalDateTime
      - dbManager: DBManagerInterface
      - lastSaveDate: LocalDateTime
      + add(MusicBand, Pair<String, String>): ExecutionStatus
      + loadCollection(): ExecutionStatus
      + removeFirst(Pair<String, String>): ExecutionStatus
      + update(MusicBand, Pair<String, String>): ExecutionStatus
      + getLastSaveDate(): LocalDateTime
      + getInitializationDate(): LocalDateTime
      + sort(): void
      + removeById(Long, Pair<String, String>): ExecutionStatus
      + getInstance(): CollectionManagerMain
      + clear(Pair<String, String>): ExecutionStatus
      + removeAllByGenre(MusicGenre, Pair<String, String>): ExecutionStatus
      + getBands(): Stack<MusicBand>
      + getCollection(): Stack<MusicBand>
      + getById(Long): MusicBand
    }
    class CollectionManagerProxy {
      - collection: Stack<MusicBand>
      - lock: ReadWriteLock
      - bandsMap: Map<Long, MusicBand>
      - collectionManagerMain: CollectionManagerMain
      - instance: CollectionManagerProxy
      - isCacheValid: AtomicBoolean
      + update(MusicBand, Pair<String, String>): ExecutionStatus
      + getById(Long): MusicBand
      + clear(Pair<String, String>): ExecutionStatus
      + add(MusicBand, Pair<String, String>): ExecutionStatus
      + sort(): void
      + getBands(): Stack<MusicBand>
      + getInitializationDate(): LocalDateTime
      + getCollection(): Stack<MusicBand>
      + getLastSaveDate(): LocalDateTime
      + removeFirst(Pair<String, String>): ExecutionStatus
      + removeAllByGenre(MusicGenre, Pair<String, String>): ExecutionStatus
      + removeById(Long, Pair<String, String>): ExecutionStatus
      + getInstance(): CollectionManagerProxy
      + loadCollection(): ExecutionStatus
      - refreshCache(): void
    }
    class Command<T> {
      - nameAndDescription: Pair<String, String>
      # collectionManager: CollectionManager
      + argumentValidator: T
      + getName(): String
      + getDescription(): String
      + equals(Object): boolean
      + toString(): String
      # runInternal(String, Pair<String, String>): ExecutionStatus
      + run(String, Pair<String, String>): ExecutionStatus
      + hashCode(): int
      + getArgumentValidator(): T
      # checkPermission(Pair<String, String>): ExecutionStatus
    }
    class CommandManager {
      - commands: Map<String, Command<?>>
      + register(String, Command<?>): void
      + getCommandsMap(): Map<String, Command<?>>
      + getCommand(String): Command<?>
    }
    enum CommandNames << enumeration >> {
      + REMOVE_FIRST:
      - commandDescription: Pair<String, String>
      + PRINT_FIELD_ASCENDING_DESCRIPTION:
      + EXECUTE_SCRIPT:
      + REMOVE_ALL_BY_GENRE:
      + UPDATE:
      + INFO:
      + UPDATE_USER_PERMISSION:
      + PRINT_FIELD_DESCENDING_DESCRIPTION:
      + ADD:
      + SORT:
      + SHOW:
      + ADD_IF_MIN:
      + EXIT:
      + CLEAR:
      + HELP:
      + REMOVE_BY_ID:
      - requiredPermission: PermissionType
      + getName(): String
      + valueOf(String): CommandNames
      + values(): CommandNames[]
      + getRequiredPermission(): PermissionType
      + getDescription(): String
    }
    class DBManager {
      - connection: Connection
      - instance: DBManagerInterface
      + updateMusicBand(MusicBand, Pair<String, String>): ExecutionStatus
      + updateUserPermissions(String, PermissionType): ExecutionStatus
      + clearAll(): ExecutionStatus
      + removeAllByGenre(MusicGenre, Pair<String, String>): ExecutionStatus
      + loadCollection(Stack<MusicBand>): ExecutionStatus
      + checkUserPermission(Pair<String, String>): ExecutionStatus
      + getInstance(): DBManagerInterface
      + checkPassword(Pair<String, String>): ExecutionStatus
      + addUser(Pair<String, String>): ExecutionStatus
      - checkUser(Pair<String, String>): ExecutionStatus
      + removeAllByGenre(MusicGenre): ExecutionStatus
      + clear(Pair<String, String>): ExecutionStatus
      + removeById(Long, Pair<String, String>): ExecutionStatus
      + addMusicBand(MusicBand, Pair<String, String>): ExecutionStatus
    }
    interface DBManagerInterface << interface >> {
      + removeAllByGenre(MusicGenre): ExecutionStatus
      + clear(Pair<String, String>): ExecutionStatus
      + addUser(Pair<String, String>): ExecutionStatus
      + removeById(Long, Pair<String, String>): ExecutionStatus
      + updateMusicBand(MusicBand, Pair<String, String>): ExecutionStatus
      + addMusicBand(MusicBand, Pair<String, String>): ExecutionStatus
      + checkPassword(Pair<String, String>): ExecutionStatus
      + clearAll(): ExecutionStatus
      + checkUserPermission(Pair<String, String>): ExecutionStatus
      + removeAllByGenre(MusicGenre, Pair<String, String>): ExecutionStatus
      + loadCollection(Stack<MusicBand>): ExecutionStatus
      + updateUserPermissions(String, PermissionType): ExecutionStatus
    }
    class ExecuteScript {
      + runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class Executor {
      - commandManager: CommandManager
      + runCommand(String[], MusicBand, Pair<String, String>): ExecutionStatus
      - validateCommand(String[]): ExecutionStatus
    }
    interface ExecutorInterface << interface >> {
      + runCommand(String[], MusicBand, Pair<String, String>): ExecutionStatus
    }
    class Exit {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class Help {
      - commandManager: CommandManager
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class Info {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class PasswordHasher {
      + getHash(String): String
    }
    class PrintFieldAscendingDescription {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class PrintFieldDescendingDescription {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class RemoveAllByGenre {
      + runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class RemoveById {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class RemoveFirst {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class Server {
      + logger: Logger
      - initLogger(): void
      - getFormatter(): Formatter
      + main(String[]): void
    }
    class ServerNetworkManager {
      - serverChannel: ServerSocketChannel
      - instance: ServerNetworkManager
      + getServerSocketChannel(): ServerSocketChannel
      + send(Response, SocketChannel): void
      + close(): void
      + getInstance(): ServerNetworkManager
      + startServer(): void
      + receive(SocketChannel, SelectionKey): Request
    }
    class Show {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class Sort {
      # runInternal(String, Pair<String, String>): ExecutionStatus
    }
    class ThreadManager {
      - readPool: ForkJoinPool
      - executor: Executor
      - instance: ThreadManager
      - writePool: ForkJoinPool
      - responseFutures: Map<SocketChannel, CompletableFuture<Response>>
      + runServer(CommandManager): void
      - getProcessRequestThread(Request, CompletableFuture<Response>): Thread
      - writeMessage(SocketChannel, SelectionKey): void
      + getInstance(): ThreadManager
      - readMessage(SocketChannel, SelectionKey): CompletableFuture<Response>
      - initialCommandsData(SocketChannel, SelectionKey, CommandManager): void
    }
    annotation Transactional << annotation >>
    class TransactionalProxy {
      - target: Object
      - connection: Connection
      + createProxy(T, Connection): T
      + invoke(Object, Method, Object[]): Object
    }
    class Update {
      # runInternal(MusicBand, Pair<String, String>): ExecutionStatus
    }
    class UpdateUserPermission {
      + runInternal(String, Pair<String, String>): ExecutionStatus
    }
}

Add                              -[#000082,plain]-^  AskingCommand                   
AddIfMin                         -[#000082,plain]-^  AskingCommand                   
AskingCommand                    -[#595959,dashed]->  ArgumentValidator
AskingCommand                    -[#000082,plain]-^  Command
AuthenticatedExecutor            -[#008200,dashed]-^  ExecutorInterface
Clear                            -[#000082,plain]-^  Command
CollectionManagerMain            -[#008200,dashed]-^  CollectionManager
CollectionManagerProxy           -[#008200,dashed]-^  CollectionManager
Command                          -[#595959,dashed]->  ArgumentValidator
Coordinates                      -[#008200,dashed]-^  Validatable
DBManager                        -[#008200,dashed]-^  DBManagerInterface
Element                          -[#008200,dashed]-^  Validatable
EmptyValidator                   -[#000082,plain]-^  ArgumentValidator
ExecuteScript                    -[#000082,plain]-^  Command
Executor                         -[#008200,dashed]-^  ExecutorInterface
Exit                             -[#000082,plain]-^  Command
FileConsole                      -[#008200,dashed]-^  Console
GenreValidator                   -[#000082,plain]-^  ArgumentValidator
Help                             -[#000082,plain]-^  Command
IdValidator                      -[#000082,plain]-^  ArgumentValidator
Info                             -[#000082,plain]-^  Command
MusicBand                        -[#000082,plain]-^  Element
PrintFieldAscendingDescription   -[#000082,plain]-^  Command
PrintFieldDescendingDescription  -[#000082,plain]-^  Command
RemoveAllByGenre                 -[#000082,plain]-^  Command
RemoveById                       -[#000082,plain]-^  Command
RemoveFirst                      -[#000082,plain]-^  Command
Show                             -[#000082,plain]-^  Command
Sort                             -[#000082,plain]-^  Command
StandartConsole                  -[#008200,dashed]-^  Console
Studio                           -[#008200,dashed]-^  Validatable
Update                           -[#000082,plain]-^  AskingCommand
UpdateUserPermission             -[#000082,plain]-^  Command
UserPermissionValidator          -[#000082,plain]-^  ArgumentValidator
@enduml
