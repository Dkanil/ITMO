@startuml

top to bottom direction
skinparam linetype ortho

class Add {
  - collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class AddIfMin {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class Asker {
  + askBand(Console, Long): MusicBand
  - askStudio(Console): Studio
  - askCoordinates(Console): Coordinates
}
interface Asking << interface >> {
  + validate(Console, Long): Pair
}
class Clear {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class CollectionManager {
  - dumpManager: DumpManager
  - Bands: Map<Long, MusicBand>
  - InitializationDate: LocalDateTime
  - collection: Stack<MusicBand>
  - id: Long
  - lastSaveDate: LocalDateTime
  + getCollection(): Stack<MusicBand>
  + saveCollection(): void
  + clear(): void
  + sort(): void
  + loadCollection(): ExecutionStatus
  + getById(Long): MusicBand
  + removeAllByGenre(MusicGenre): int
  + add(MusicBand): boolean
  + removeById(Long): void
  + getBands(): Stack<MusicBand>
  + getFreeId(): Long
  + getInitializationDate(): LocalDateTime
  + removeFirst(): void
  + getLastSaveDate(): LocalDateTime
}
class Command {
  - name: String
  # console: Console
  - description: String
  + getName(): String
  + hashCode(): int
  + equals(Object): boolean
  + getDescription(): String
  + updateConsole(Console): void
  + toString(): String
  + run(String): ExecutionStatus
  + validate(String, String): ExecutionStatus
}
class CommandManager {
  - commands: Map<String, Command>
  + getCommand(String): Command
  + register(String, Command): void
  + getCommandsMap(): Map<String, Command>
}
enum CommandNames << enumeration >> {
  + PRINT_FIELD_DESCENDING_DESCRIPTION: 
  - description: String
  + SAVE: 
  + HELP: 
  + SORT: 
  + ADD_IF_MIN: 
  + REMOVE_BY_ID: 
  + REMOVE_ALL_BY_GENRE: 
  - command: String
  + CLEAR: 
  + ADD: 
  + EXIT: 
  + UPDATE: 
  + REMOVE_FIRST: 
  + SHOW: 
  + INFO: 
  + EXECUTE_SCRIPT: 
  + PRINT_FIELD_ASCENDING_DESCRIPTION: 
  + values(): CommandNames[]
  + getDescription(): String
  + getName(): String
  + valueOf(String): CommandNames
}
interface Console << interface >> {
  + print(Object): void
  + printTable(Object, Object): void
  + readln(): String
  + println(Object): void
  + printError(Object): void
}
class Coordinates {
  - y: Integer
  - x: double
  + getX(): double
  + toString(): String
  + equals(Object): boolean
  + getY(): Integer
  + validate(): boolean
  + hashCode(): int
}
class DumpManager {
  - fileName: String
  - console: Console
  + WriteCollection(Stack<MusicBand>): void
  + ReadCollection(Stack<MusicBand>): void
}
class Element {
  + getID(): Long
}
class ExecuteScript {
  + run(String): ExecutionStatus
  + validate(String, String): ExecutionStatus
}
class Executer {
  - console: Console
  - scriptStackCounter: int
  + runScript(String): ExecutionStatus
  - runCommand(String[]): ExecutionStatus
  + interactiveMode(): void
}
class ExecutionStatus {
  - success: boolean
  - message: String
  + isSuccess(): boolean
  + getMessage(): String
}
class Exit {
  + run(String): ExecutionStatus
}
class FileConsole {
  - input: BufferedReader
  + printError(Object): void
  + readln(): String
  + print(Object): void
  + println(Object): void
  + printTable(Object, Object): void
}
class Help {
  - commandManager: CommandManager
  + run(String): ExecutionStatus
}
class IdArgumentCommand {
  ~ collectionManager: CollectionManager
  + validate(String, String): ExecutionStatus
}
class Info {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class Main {
  + main(String[]): void
}
class MusicBand {
  - albumsCount: Long
  - name: String
  - studio: Studio
  - genre: MusicGenre
  - numberOfParticipants: Long
  - creationDate: LocalDateTime
  - description: String
  - id: Long
  - coordinates: Coordinates
  + getGenre(): MusicGenre
  + getAlbumsCount(): Long
  + getDescription(): String
  + getNumberOfParticipants(): Long
  + hashCode(): int
  + validate(): boolean
  + getId(): Long
  + getID(): Long
  + getCreationDate(): LocalDateTime
  + getCoordinates(): Coordinates
  + toArray(MusicBand): String[]
  + toString(): String
  + compareTo(Element): int
  + fromArray(String[]): MusicBand
  + getName(): String
  + getStudio(): Studio
  + equals(Object): boolean
}
enum MusicGenre << enumeration >> {
  + JAZZ: 
  + MATH_ROCK: 
  + BRIT_POP: 
  + list(): String
  + valueOf(String): MusicGenre
  + values(): MusicGenre[]
}
class NoArgumentCommand {
  + validate(String, String): ExecutionStatus
}
class PrintFieldAscendingDescription {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class PrintFieldDescendingDescription {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class RemoveAllByGenre {
  ~ collectionManager: CollectionManager
  + validate(String, String): ExecutionStatus
  + run(String): ExecutionStatus
}
class RemoveById {
  + run(String): ExecutionStatus
}
class RemoveFirst {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class Save {
  ~ collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class Show {
  - collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class Sort {
  - collectionManager: CollectionManager
  + run(String): ExecutionStatus
}
class StandartConsole {
  + readln(): String
  + println(Object): void
  + printTable(Object, Object): void
  + print(Object): void
  + printError(Object): void
}
class Studio {
  - name: String
  - address: String
  + toString(): String
  + getAddress(): String
  + equals(Object): boolean
  + hashCode(): int
  + validate(): boolean
  + getName(): String
}
class Update {
  + run(String): ExecutionStatus
}
interface Validatable << interface >> {
  + validate(): boolean
}

Add                              -[#008200,dashed]-^  Asking                          
Add                              -[#000082,plain]-^  NoArgumentCommand               
AddIfMin                         -[#008200,dashed]-^  Asking                          
AddIfMin                         -[#000082,plain]-^  NoArgumentCommand               
Clear                            -[#000082,plain]-^  NoArgumentCommand               
Coordinates                      -[#008200,dashed]-^  Validatable                     
Element                          -[#008200,dashed]-^  Validatable                     
ExecuteScript                    -[#000082,plain]-^  Command                         
Exit                             -[#000082,plain]-^  NoArgumentCommand               
FileConsole                      -[#008200,dashed]-^  Console                         
Help                             -[#000082,plain]-^  NoArgumentCommand               
IdArgumentCommand                -[#000082,plain]-^  Command                         
Info                             -[#000082,plain]-^  NoArgumentCommand               
MusicBand                        -[#000082,plain]-^  Element                         
NoArgumentCommand                -[#000082,plain]-^  Command                         
PrintFieldAscendingDescription   -[#000082,plain]-^  NoArgumentCommand               
PrintFieldDescendingDescription  -[#000082,plain]-^  NoArgumentCommand               
RemoveAllByGenre                 -[#000082,plain]-^  Command                         
RemoveById                       -[#000082,plain]-^  IdArgumentCommand               
RemoveFirst                      -[#000082,plain]-^  NoArgumentCommand               
Save                             -[#000082,plain]-^  NoArgumentCommand               
Show                             -[#000082,plain]-^  NoArgumentCommand               
Sort                             -[#000082,plain]-^  NoArgumentCommand               
StandartConsole                  -[#008200,dashed]-^  Console                         
Studio                           -[#008200,dashed]-^  Validatable                     
Update                           -[#008200,dashed]-^  Asking                          
Update                           -[#000082,plain]-^  IdArgumentCommand               
@enduml
