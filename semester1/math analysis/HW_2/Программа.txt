subroutine BISECT(a, b, eps, f, x0, k)
    interface
        function f(x)
            real(16) :: f
            real(16), intent(in) :: x
        end function f
    end interface

    real(16) :: x0, eps, a, b, an, bn, s, r, y
    integer :: k

    k = 0
    s = 1.0_16
    an = a
    bn = b
    r = f(a)

1   x0 = 0.5_16 * (an + bn)
    y = f(x0)

    if ((y .eq. 0.0_16) .or. ((bn - an) .le. (2.0_16 * eps))) go to 4

    k = k + 1
    s = sign(s, r) * sign(s, y)
    if (s < 0.0_16) then
        go to 2
    elseif (s == 0.0_16) then
        go to 4
    else
        go to 3
    end if

2   bn = x0
    go to 1

3   an = x0
    r = y
    go to 1

4   return
end subroutine BISECT

program main
    interface
        function f(x)
            real(16) :: f
            real(16), intent(in) :: x
        end function f
    end interface

    real(16) :: a, b, eps, x
    integer :: k

    a = 2.0_16
    b = 4.0_16
    eps = 5.e-18_16

    call BISECT(a, b, eps, f, x, k)

    print 1, x, k
1   format('корень ', f19.17, ' количество итераций', i3)

    stop
end program main

function f(x)
    implicit none
    real(16) :: f
    real(16), intent(in) :: x

    f = exp(1.0_16 / (x * x)) - log(x)
    return
end function f