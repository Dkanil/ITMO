@startuml
Class Main {
    + void Main()
}
package entities {
    abstract class Entity {
        # name: String
        # items: ArrayList<Item>
        # location: Location
        # stat: Stat
        + {abstract} void Speak()
        + void Move()
    }
    package people {
        abstract Class People {
            # amount: int
        }
        Class Sailors {
            + void DoCommand()
            + string toString()
        }
        Class Enemies {
            + void Steal()
            + void Attack()
            + string toString()
        }
    }
    package human {
        abstract Class Human {
            # age: int
        }
        Class Capitan {
            + String MakeCommand()
            + string toString()
        }

        Class Governor {
            + string toString()
        }
        Class MainCharacter {
            + void Pray()
            + string toString()
        }
    }
    interface Owner{
        + void getItem()
    }
}

package enums{
    Enum Item{
        # FOOD
        # TUKES
    }
    Enum Location{
        # DESERT
        # SEA
        # ISLAND
    }
    Enum Stat {
        # DEATH
        # STRESSED
        # LONELINESS
        # NORMAL
    }
}
class Transport <<record>>{
    # name: String
    + void move()
}

Owner ..> Entity
Entity . Transport: move()
Entity --|> Human
Entity --|> People
Human --|> Capitan
Human --|> Governor
Human --|> MainCharacter
People --|> Sailors
People --|> Enemies
Capitan <.> Sailors: MakeCommand()\nDoCommand()
@enduml